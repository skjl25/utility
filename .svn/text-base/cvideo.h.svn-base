/*
 * cvideo.h
 *
 *  Created on: Mar 21, 2012
 *      Author: root
 */

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <pthread.h>
#include <GL/glut.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <math.h>
#include <pthread.h>
#include <math.h>
#include <vector>
#include "omp.h"
#include "utility.h"
#include <algorithm>
#include <vector>
#include <opencv/cv.h>
#include <opencv/highgui.h>

#ifndef CVIDEO_H_
#define CVIDEO_H_
#define PI 3.14159265

using namespace std;

class macroB{
public:
	//0 if it is not ROI
	//1 if it is ROI
	int ROIFlag;
	double** macroBPixel;
	double deliveryRate;
	char* orgImage;
};

class cvideo {
public:

	macroB* macroBHolder;

	cvideo();
	cvideo(int Height, int Width, int macroBlockSize, double nonROIDeliver,
			double ROIDeliver);

	void setMacroBHolder();
	double* getOneIntegratedArray(double** inputArray);

	void setMacroBPixel(double** doubleOrgImage);
	void getDCTArray();
	double* getZigZagArray(int macroBlockID);
	double** setMacroBlocksToOriginalImage();
	void getInverseZigZagArray(double** inputArray);


	void setMacroBPixel_withROI(double** doubleOrgImage, vector<int> vw);

	void getIDCTArray();

	// frome here

	void quantization(short** matrix);
	void dc_encoding(short** mat, int** intmat,int* preblock);
	void ac_encoding(short** mat,int** intmat,int* preblock);
	void zigzag(short* block);
	void ac_decoding(short** mat,int** intmat,int* Ipreblock);
	int* IacHuff(int data);
	short symb2(short sym2, short cat);               // calculate the original data from symbol-2
	void dc_decoding(short** mat,int** intmat,int* Ipreblock);                 // function doing dc decoding;
	short symbol2(short diff);
	int count(short run, short cat);
	short achuff(short run, short cat);
	short dchuff(short cat);
	short cat (short diff);
	short IdcHuff(int data);
	void iquantization(short** mat);
	void izigzag(short* block);

	//////////////////////////////////////////////////////

	char* convertToGrayScale(char* origImg, int width, int height);
	void getZigZagArray_with_ROI(double* realReturnArray, int macroBlockID);
	void getInverseZigZagArray_withROI(vector< vector<double> > inputArray, vector<int> vw);
	double* getOneIntegratedArray_withROI(double** inputArray, vector<int> vw);

	inline int getNumberOfRow()						{	return numberOfRow;};
	inline int getNumberOfColumn()					{ 	return numberOfColumn;};
	inline int getNumberOfMacroBlocks()				{	return numberOfMacroBlocks;};
	inline int getMacroBlockWidth()					{	return macroBlockWidth;};
	inline int getMacroBlockHeight()				{	return macroBlockHeight;};
	inline int getImageHeight()						{	return imageHeight;};
	inline int getImageWidth()						{	return imageWidth;};
	inline double getDeliveryRate()					{	return deliveryRate;};
	inline double getROIDeliveryRate()				{	return ROIdeliveryRate;};
	inline int getLengthOfOneMacroString()			{	return lengthOfOneMacroString;};
	inline int getROILengthOfOneMacroString()		{	return ROIlengthOfOneMacroString;};

	inline void setNumberOfRow()					{	numberOfRow=imageHeight/macroBlockHeight;};
	inline void setNumberOfColumn()					{	numberOfColumn=imageWidth/macroBlockWidth;};
	inline void setNumberOfMacroBlocks()			{	numberOfMacroBlocks=numberOfRow*numberOfColumn;};
	inline void setMacroBlockWidth(int mbwidth)		{	macroBlockWidth = mbwidth;};
	inline void setMacroBlockHeight(int mbwidth)	{	macroBlockHeight = mbwidth;};
	inline void setImageHeight(int imageHeight1)	{	imageHeight=imageHeight1;};
	inline void setImageWidth(int imageWidth1)		{	imageWidth=imageWidth1;};
	inline void setDeliveryRate(double dR)			{	deliveryRate=dR;};
	inline void setROIDeliveryRate(double dR)		{	ROIdeliveryRate=dR;};
	inline void setLengthOfOneMacroString()			{	lengthOfOneMacroString = (int)(macroBlockHeight * macroBlockWidth * deliveryRate);};
	inline void setLengthOfOneMacroString_withROI()	{	ROIlengthOfOneMacroString = (int)(macroBlockHeight * macroBlockWidth * 1.0);};

	void setMacroBPixel_withROI_ext(IplImage* grayImage, vector<int> vw);
	vector<double> getZigZagArray_with_ROI_ext();

	virtual ~cvideo();

private:
	int numberOfRow;//for now for 256 macro blocks
	int numberOfColumn;//for now for 256 macro blocks
	int numberOfMacroBlocks;//temp
	int macroBlockWidth;
	int macroBlockHeight;
	int lengthOfOneMacroString;
	int ROIlengthOfOneMacroString;
	int imageWidth;
	int imageHeight;
	double deliveryRate;
	double ROIdeliveryRate;
};


#endif /* CVIDEO_H_ */
